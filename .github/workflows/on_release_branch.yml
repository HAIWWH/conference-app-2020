name: On release branch

on:
  push:
    branches:
      - "/travis/.*/"
      - master
      - release
    tags:
      - "/^v\\d+\\.\\d+(\\.\\d+)?(-\\S*)?$/"

jobs:
  build:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-java@v1
      with:
        java-version: '8'
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-m2-${{ hashFiles('**/*.gradle.kts') }}-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-m2-${{ hashFiles('**/*.gradle.kts') }}-
          ${{ runner.os }}-m2-
    - run: .github/android/setup.bash
    - run: ./gradlew androidDependenciesExtra dependencies
      shell: bash
    - run: ./gradlew android-base:assembleRelease --offline
      shell: bash
    - run: echo "::set-output name=path::$(find android-base -name '*.apk' | head -1)"
      id: find-apk
    - name: Store an apk to GitHub
      uses: actions/upload-artifact@v1
      with:
        name: apk
        path: ${{ steps.find-apk.outputs.path }}

  deploy-deploygate:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download an apk file
        uses: actions/download-artifact@v1
        with:
          name: apk
          path: download-artifacts
      - run: |
          echo "::set-output name=apk_path::$(find download-artifacts -name '*.apk' | head -1)"
          echo "::set-output name=message::Release build of $(git rev-parse --short HEAD) at $(date)"
        id: prep
     - uses: jmatsu/dg-upload-app-action@master
       id: dg
       with:
         app_owner_name: ${{ secrets.DEPLOYGATE_APP_OWNER_NAME }}
         api_token: ${{ secrets.DEPLOYGATE_API_TOKEN }}
         app_file_path: ${{ steps.prep.outputs.apk_path }}
         message: ${{ steps.prep.outputs.message }}
         distribution_find_by: name
         distribution_id: Production Build
         ignore_api_failure: true

  attach-gh-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: echo "::set-output name=version::$(cat .ruby-version)"
        id: ruby
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: ${{ steps.ruby.outputs.version }}
      - name: Download an apk file
        uses: actions/download-artifact@v1
        with:
          name: apk
          path: download-artifacts
      - run: |
          echo "::set-output name=apk_path::$(find download-artifacts -name '*.apk' | head -1)"
          echo "::set-output name=message::Release build of $(git rev-parse --short HEAD) at $(date)"
        id: prep
     - uses: jmatsu/dg-upload-app-action@master
       id: dg
       with:
         app_owner_name: ${{ secrets.DEPLOYGATE_APP_OWNER_NAME }}
         api_token: ${{ secrets.DEPLOYGATE_API_TOKEN }}
         app_file_path: ${{ steps.prep.outputs.apk_path }}
         message: ${{ steps.prep.outputs.message }}
         distribution_find_by: name
         distribution_id: Production Build
         ignore_api_failure: true

  test: # this should succeed anytime. danger job will fail properly.
    env:
      JUNIT_TEST_RESULT_DIR: test-results/junit
      JUNIT_TEST_REPORT_DIR: test-reports/
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-java@v1
      with:
        java-version: '8'
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-m2-${{ hashFiles('**/*.gradle.kts') }}-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-m2-${{ hashFiles('**/*.gradle.kts') }}-
          ${{ runner.os }}-m2-
    - run: './gradlew lintDebug testDebug ktlint --continue || true'
      shell: bash
    - name: Collect test results
      shell: bash
      run: |
        mkdir -p ${{ env.JUNIT_TEST_RESULT_DIR }}
        find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ${{ env.JUNIT_TEST_RESULT_DIR }}/ \;
    - name: Store test results to GitHub
      uses: actions/upload-artifact@v1
      with:
        name: test-results
        path: ${{ env.JUNIT_TEST_RESULT_DIR }}
    - name: Collect test reports
      shell: bash
      run: |
        mkdir -p ${{ env.JUNIT_TEST_REPORT_DIR }}
        while read dirpath; do
          cp -r $dirpath ${{ env.JUNIT_TEST_REPORT_DIR }}/$(echo $dirpath | sed -e 's/^\.\///g' -e 's/\//-/g')
        done < <(find . -type d -regex ".*/build/reports")
    - name: Store test reports to GitHub
      uses: actions/upload-artifact@v1
      with:
        name: test-reports
        path: ${{ env.JUNIT_TEST_REPORT_DIR }}

  danger:
    env:
      JUNIT_TEST_RESULT_DIR: test-results/junit
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: echo "::set-output name=version::$(cat .ruby-version)"
        id: ruby
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: ${{ steps.ruby.outputs.version }}
      - name: Download test results
        uses: actions/download-artifact@v1
        with:
          name: test-results
          path: ${{ env.JUNIT_TEST_RESULT_DIR }}
      - uses: actions/cache@v1
        with:
          path: ~/vendor/bundle
          key: ${{ runner.os }}-bundle-${{ hashFiles('.ci/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-bundle-
      - run: bundle check || bundle install --path=vendor/bundle --jobs=4 --clean --gemfile=.ci/Gemfile
#      - run: bundle exec --gemfile=.ci/Gemfile danger --dangerfile=".ci/danger/static_analysis.Dangerfile" --danger_id='static_analysis' --remove-previous-comments
#        env:
#          DANGER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # TODO Download the latest apk from ...?
      # - name: Download an apk file
      #   uses: actions/download-artifact@v1
      #   with:
      #     name: apk
      # - run: echo "::set-env name=NEW_APK_FILEPATH::$(find android-base -name '*.apk' | head -1)"
      # - run: bundle exec danger --dangerfile=".ci/danger/apk_comparison.Dangerfile" --danger_id='apk_comparison' --remove-previous-comments
      #   env:
      #     DANGER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
